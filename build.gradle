buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://plugins.gradle.org/m2' }
        maven { url = "https://www.cursemaven.com"  }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        //classpath 'gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.1.2'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}
//Forge, Mixins
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

//Packing and Publishing
apply plugin: 'eclipse'
//apply plugin: 'maven'
apply plugin: 'maven-publish'
version = "${mcver}-${projectver}"
group = "com.${organization}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

java {
    archivesBaseName = mainpackage
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'official', version: mcver

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mainpackage
            mods {
                viciouscore {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mainpackage
            mods {
                viciouscore {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', mainpackage
            mods {
                viciouscore {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', mainpackage, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                viciouscore {
                    source sourceSets.main
                }
            }
        }
    }
}
mixin {
    add sourceSets.main, "${mainpackage}.refmap.json"
    config "mixins.${mainpackage}.json"
}
sourceSets.main.resources { srcDir 'src/generated/resources' }


configurations {
    embed
    implementation.extendsFrom(embed)
}

repositories {
    maven {
        name = "ViciousLib"
        url = uri("https://maven.pkg.${viciousorglink}/ViciousLib")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
            password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
        }
    }
    maven { url = 'https://repo.spongepowered.org/maven' }
    mavenCentral()
}

dependencies {
    minecraft ("net.minecraftforge:forge:${mcver}-${forgever}")
    embed("com.vicious:viciouslib:${vlver}")
    embed('org.json:json:20220320')
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly (fileTree(dir: 'lib', include: ['*.jar']))
}

shadowJar{
    configurations = [project.configurations.embed]
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": mainpackage,
            "Specification-Vendor": organization,
            "Specification-Version": projectver, // We are version 1 of ourselves
            "Implementation-Title": githubprojectname,
            "Implementation-Version": version,
            "Implementation-Vendor" : organization,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Fix the classpath the right way and once and for all
afterEvaluate {
    // Collect deps in runtimeClasspath but NOT in minecraft
    def deps = (configurations.embed - configurations.minecraft).join(';')
    // Add deps to classpath
    minecraft.runs.each { run ->
        run.token 'minecraft_classpath', deps
    }
}



shadowJar{
    configurations = [project.configurations.embed]
    classifier = 'deobf'
}
task reobf(type: Jar){
    from shadowJar
    classifier = 'reobf'
    finalizedBy 'reobfShadowJar'
}


reobf {
    shadowJar {}
}
jar {
    shadowJar{}
}


/*
PUBLISHING START
 */

publishing {
    repositories {
        maven {
            name = githubprojectname
            url = uri("https://maven.pkg.${viciousorglink}/${githubprojectname}")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GPR_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GPR_API_KEY")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = group
            artifactId = mainpackage
            from components.java
        }
    }
}

/*
PUBLISHING END
 */

